!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/common")):"function"==typeof define&&define.amd?define("angular-file-uploader",["exports","@angular/core","@angular/common"],t):t(e["angular-file-uploader"]={},e.ng.core,e.ng.common)}(this,function(e,t,n){"use strict";var i=function(){function e(){}return e.decorators=[{type:t.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[]},e.ngInjectableDef=t.defineInjectable({factory:function(){return new e},token:e,providedIn:"root"}),e}();var s=function(){function e(){this.config={},this.resetUpload=this.config.resetUpload,this.ApiResponse=new t.EventEmitter,this.idDate=+new Date,this.reg=/(?:\.([^.]+))?$/,this.selectedFiles=[],this.notAllowedList=[],this.Caption=[],this.singleFile=!0,this.progressBarShow=!1,this.uploadBtn=!1,this.uploadMsg=!1,this.afterUpload=!1,this.uploadClick=!0}return e.prototype.ngOnChanges=function(e){e.config&&(this.theme=this.config.theme||"",this.id=this.config.id||parseInt((this.idDate/1e4).toString().split(".")[1])+1e4*Math.floor(20*Math.random()),this.hideProgressBar=this.config.hideProgressBar||!1,this.hideResetBtn=this.config.hideResetBtn||!1,this.hideSelectBtn=this.config.hideSelectBtn||!1,this.uploadBtnText=this.config.uploadBtnText||"Upload",this.maxSize=this.config.maxSize||20,this.uploadAPI=this.config.uploadAPI.url,this.formatsAllowed=this.config.formatsAllowed||".jpg,.png,.pdf,.docx,.txt,.gif,.jpeg",this.multiple=this.config.multiple||!1,this.headers=this.config.uploadAPI.headers||{},this.attachPinText=this.config.attachPinText||"Attach supporting documents.."),e.resetUpload&&!0===e.resetUpload.currentValue&&this.resetFileUpload()},e.prototype.ngOnInit=function(){this.resetUpload=!1},e.prototype.resetFileUpload=function(){this.selectedFiles=[],this.Caption=[],this.notAllowedList=[],this.uploadMsg=!1,this.uploadBtn=!1},e.prototype.onChange=function(e){var t,n,i,s,o;this.notAllowedList=[],!this.afterUpload&&this.multiple||(this.selectedFiles=[],this.Caption=[],this.afterUpload=!1),t=(t=this.formatsAllowed.match(new RegExp("\\.","g"))).length,n="drop"==e.type?e.dataTransfer.files:e.target.files||e.srcElement.files;for(var a=0;a<n.length;a++){i=(i=this.reg.exec(n[a].name))[1],o=!1;for(var l=t;0<l;l--)s=this.formatsAllowed.split(".")[l],l==t&&(s=this.formatsAllowed.split(".")[l]+","),i.toLowerCase()==s.split(",")[0]&&(o=!0);o?n[a].size>1024e3*this.maxSize?this.notAllowedList.push({fileName:n[a].name,fileSize:this.convertSize(n[a].size),errorMsg:"Invalid size"}):this.selectedFiles.push(n[a]):this.notAllowedList.push({fileName:n[a].name,fileSize:this.convertSize(n[a].size),errorMsg:"Invalid format"})}0!==this.selectedFiles.length?(this.uploadBtn=!0,"attachPin"==this.theme&&this.uploadFiles()):this.uploadBtn=!1,this.uploadMsg=!1,this.uploadClick=!0,this.percentComplete=0,e.target.value=null},e.prototype.uploadFiles=function(){var e,t=this;this.progressBarShow=!0,this.uploadClick=!1;var n,i,s=!(this.notAllowedList=[]),o=new XMLHttpRequest,a=new FormData;for(e=0;e<this.selectedFiles.length;e++)this.Caption[e]==undefined&&(this.Caption[e]="file"+e),a.append(this.Caption[e],this.selectedFiles[e]);this.singleFile=!(1<e),o.onreadystatechange=function(e){4===o.readyState&&(200!==o.status&&(s=!0,t.progressBarShow=!1,t.uploadBtn=!1,t.uploadMsg=!0,t.afterUpload=!0,t.uploadMsgText="Upload Failed !",t.uploadMsgClass="text-danger lead"),t.ApiResponse.emit(o))},o.upload.onprogress=function(e){t.uploadBtn=!1,e.lengthComputable&&(t.percentComplete=Math.round(e.loaded/e.total*100))},o.onload=function(e){t.progressBarShow=!1,t.uploadBtn=!1,t.uploadMsg=!0,t.afterUpload=!0,s||(t.uploadMsgText="Successfully Uploaded !",t.uploadMsgClass="text-success lead")},o.onerror=function(e){},o.open("POST",this.uploadAPI,!0);try{for(var l=function d(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}(Object.keys(this.headers)),r=l.next();!r.done;r=l.next()){var p=r.value;o.setRequestHeader(p,this.headers[p])}}catch(c){n={error:c}}finally{try{r&&!r.done&&(i=l["return"])&&i.call(l)}finally{if(n)throw n.error}}o.send(a)},e.prototype.removeFile=function(e,t){"sf"==t?(this.selectedFiles.splice(e,1),this.Caption.splice(e,1)):this.notAllowedList.splice(e,1),0==this.selectedFiles.length&&(this.uploadBtn=!1)},e.prototype.convertSize=function(e){return e<1024e3?(e/1024).toFixed(2)+" KB":(e/1024e3).toFixed(2)+" MB"},e.prototype.attachpinOnclick=function(){document.getElementById("sel"+this.id).click()},e.prototype.drop=function(e){e.stopPropagation(),e.preventDefault(),this.onChange(e)},e.prototype.allowDrop=function(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"},e.decorators=[{type:t.Component,args:[{selector:"angular-file-uploader",template:'<div class="container" *ngIf="(theme !== \'attachPin\')" id="default">\n\n    \x3c!-- Drag n Drop theme Starts --\x3e\n    <div *ngIf="theme == \'dragNDrop\'" id="dragNDrop" [ngClass]="(hideSelectBtn && hideResetBtn) ? null : \'dragNDropBtmPad\'" class="dragNDrop">\n        <div style="position:relative;">\n            <div id="div1" class="div1 afu-dragndrop-box" (drop)="drop($event)" (dragover)="allowDrop($event)">\n                <p class="afu-dragndrop-text">Drag N Drop</p>\n            </div>\n            \x3c!-- <span class=\'label label-info\' id="upload-file-info{{id}}">{{selectedFiles[0]?.name}}</span> --\x3e\n        </div>\n    </div>\n    \x3c!-- Drag n Drop theme Ends --\x3e\n\n    <label for="sel{{id}}" class="btn btn-primary btn-sm afu-select-btn" *ngIf="!hideSelectBtn">Select File<span *ngIf="multiple">s</span></label>\n    <input type="file" id="sel{{id}}" style="display: none" *ngIf="!hideSelectBtn" (change)="onChange($event)" title="Select file"\n        name="files[]" [accept]=formatsAllowed [attr.multiple]="multiple ? \'\' : null" />\n    <button class="btn btn-info btn-sm resetBtn afu-reset-btn" (click)="resetFileUpload()" *ngIf="!hideResetBtn">Reset</button>\n    <br *ngIf="!hideSelectBtn">\n    <p class="constraints-info afu-constraints-info">({{formatsAllowed}}) Size limit- {{(convertSize(maxSize *1024000))}}</p>\n    \x3c!--Selected file list--\x3e\n    <div class="row afu-valid-file" *ngFor="let sf of selectedFiles;let i=index" >\n        <p class="col-xs-3 textOverflow"><span class="text-primary">{{sf.name}}</span></p>\n        <p class="col-xs-3 padMarg sizeC"><strong>({{convertSize(sf.size)}})</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n        \x3c!--  <input class="col-xs-3 progress caption"  type="text"  placeholder="Caption.."  [(ngModel)]="Caption[i]"  *ngIf="uploadClick"/> --\x3e\n        <div class="progress col-xs-3 padMarg afu-progress-bar" *ngIf="singleFile && progressBarShow && !hideProgressBar">\n            <span class="progress-bar progress-bar-success" role="progressbar" [ngStyle]="{\'width\':percentComplete+\'%\'}">{{percentComplete}}%</span>\n        </div>\n        <a class="col-xs-1" role="button" (click)="removeFile(i,\'sf\')" *ngIf="uploadClick"><i class="fa fa-times"></i></a>\n    </div>\n    \x3c!--Invalid file list--\x3e\n    <div class="row text-danger afu-invalid-file" *ngFor="let na of notAllowedList;let j=index">\n        <p class="col-xs-3 textOverflow"><span>{{na[\'fileName\']}}</span></p>\n        <p class="col-xs-3 padMarg sizeC"><strong>({{na[\'fileSize\']}})</strong></p>\n        <p class="col-xs-3 ">{{na[\'errorMsg\']}}</p>\n        <a class="col-xs-1 delFileIcon" role="button" (click)="removeFile(j,\'na\')" *ngIf="uploadClick">&nbsp;<i class="fa fa-times"></i></a>\n    </div>\n\n    <p *ngIf="uploadMsg" class="{{uploadMsgClass}} + afu-upload-status">{{uploadMsgText}}<p>\n    <div *ngIf="!singleFile && progressBarShow && !hideProgressBar">\n        <div class="progress col-xs-4 padMarg afu-progress-bar">\n            <span class="progress-bar progress-bar-success" role="progressbar" [ngStyle]="{\'width\':percentComplete+\'%\'}">{{percentComplete}}%</span>\n        </div>\n        <br>\n        <br>\n    </div>\n    <button class="btn btn-success afu-upload-btn" type="button" (click)="uploadFiles()" [disabled]=!uploadBtn>{{uploadBtnText}}</button>\n    <br>\n</div>\n\n\x3c!--/////////////////////////// ATTACH PIN THEME  //////////////////////////////////////////////////////////--\x3e\n<div *ngIf="theme == \'attachPin\'" id="attachPin">\n    <div style="position:relative;padding-left:6px">\n        <a class=\'btn up_btn afu-attach-pin\' (click)="attachpinOnclick()">\n            {{attachPinText}}\n            <i class="fa fa-paperclip" aria-hidden="true"></i>\n            \x3c!-- <p style="margin-top:10px">({{formatsAllowed}}) Size limit- {{(convertSize(maxSize * 1024000))}}</p> --\x3e\n            <input type="file" id="sel{{id}}" (change)="onChange($event)" style="display: none" title="Select file" name="files[]" [accept]=formatsAllowed\n                [attr.multiple]="multiple ? \'\' : null" />\n            <br>\n        </a>\n        &nbsp;\n        <span class=\'label label-info\' id="upload-file-info{{id}}">{{selectedFiles[0]?.name}}</span>\n    </div>\n</div>\n\n\x3c!--/////////////////////////// DRAG N DROP THEME  //////////////////////////////////////////////////////////--\x3e\n\x3c!-- <div *ngIf="theme == \'dragNDrop\'" id="dragNDrop">\n  <div style="position:relative;padding-left:6px">\n    <div id="div1" (drop)="drop($event)" (dragover)="allowDrop($event)">\n      <p>Drag N Drop</p>\n    </div>\n    <span class=\'label label-info\' id="upload-file-info{{id}}">{{selectedFiles[0]?.name}}</span>\n  </div>\n</div> --\x3e',styles:[".constraints-info{margin-top:10px;font-style:italic}.padMarg{padding:0;margin-bottom:0}.caption{margin-right:5px}.textOverflow{white-space:nowrap;padding-right:0;overflow:hidden;text-overflow:ellipsis}.up_btn{color:#000;background-color:transparent;border:2px solid #5c5b5b;border-radius:22px}.delFileIcon{text-decoration:none;color:#ce0909}.dragNDrop .div1{display:border-box;border:2px dashed #5c5b5b;height:6rem;width:20rem}.dragNDrop .div1>p{text-align:center;font-weight:700;color:#5c5b5b;margin-top:1.4em}.dragNDropBtmPad{padding-bottom:2rem}@media screen and (max-width:620px){.caption{padding:0}}@media screen and (max-width:510px){.sizeC{width:25%}}@media screen and (max-width:260px){.caption,.sizeC{font-size:10px}}.resetBtn{margin-left:3px}"]}]}],e.ctorParameters=function(){return[]},e.propDecorators={config:[{type:t.Input}],resetUpload:[{type:t.Input}],ApiResponse:[{type:t.Output}]},e}(),o=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{imports:[n.CommonModule],declarations:[s],exports:[s]}]}],e}();e.AngularFileUploaderService=i,e.AngularFileUploaderComponent=s,e.AngularFileUploaderModule=o,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=angular-file-uploader.umd.min.js.map